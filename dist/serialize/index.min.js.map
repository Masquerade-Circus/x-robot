//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"names":["serialize_exports","__export","serialize","__EXPORTS__","isValidString","str","trim","length","isValidObject","obj","isProducer","producer","cloneContext","context","weakMap","WeakMap","has","get","result","Array","isArray","map","item","key","Date","getTime","Set","Map","RegExp","source","flags","array","from","val","set","serializeProducer","serialized","name","transition","isProducerWithTransition","serializeRunArguments","run","action","success","failure","serializeAction","serializeGuards","guards","guard","machine","serializeGuard","serializeTransition","target","serializeImmediate","immediate","serializeTransitions","events","Object","keys","event","serializeContext","serializeNested","nested","serializedNestedMachine","states","parallel","initial","title","state","on","serializedImmediate","immediateDirective","push","type","description"],"sources":["../../lib/serialize/index.ts","../../lib/utils.ts"],"sourcesContent":["/**\n * @module x-robot/serialize\n * @description Serializes a machine to a JSON object\n * */\n\nimport {\n  ActionDirective,\n  GuardDirective,\n  GuardsDirective,\n  ImmediateDirective,\n  Machine,\n  NestedGuardDirective,\n  NestedMachineDirective,\n  ProducerDirective,\n  RunCollection,\n  TransitionDirective,\n  TransitionsDirective,\n} from \"../machine/interfaces\";\nimport { cloneContext, isAction, isProducer, isProducerWithTransition, isValidString } from \"../utils\";\n\nexport interface SerializedProducer {\n  producer: string;\n  transition?: string;\n}\n\nexport interface SerializedAction {\n  action: string;\n  success?: string | SerializedProducer;\n  failure?: string | SerializedProducer;\n}\n\nexport interface SerializedGuard {\n  guard: string;\n  failure?: string | SerializedProducer;\n  machine?: SerializedMachine;\n}\n\nexport interface SerializedCollection extends Array<SerializedAction | SerializedProducer> {}\n\nexport interface SerializedTransition {\n  target: string;\n  guards?: SerializedGuard[];\n}\n\nexport interface SerializedTransitions {\n  [key: string]: SerializedTransition;\n}\n\nexport interface SerializedImmediate {\n  immediate: string;\n  guards?: SerializedGuard[];\n}\n\nexport interface SerializedState {\n  name: string;\n  nested?: SerializedNestedMachine[];\n  on?: SerializedTransitions;\n  run?: SerializedCollection;\n  immediate?: SerializedImmediate[];\n  type?: string;\n  description?: string;\n}\n\nexport interface SerializedStates {\n  [key: string]: SerializedState;\n}\n\nexport interface SerializedMachine {\n  title?: string;\n  states: SerializedStates;\n  parallel: Record<string, SerializedMachine>;\n  context: any;\n  initial: any;\n}\n\nexport interface SerializedNestedMachine {\n  machine: SerializedMachine;\n  transition?: string;\n}\n\n/**\n * @param producer The producer to serialize\n * @returns SerializedProducer\n */\nfunction serializeProducer(producer: ProducerDirective): SerializedProducer {\n  let serialized: SerializedProducer = {\n    producer: producer.producer.name,\n  };\n\n  if (isProducerWithTransition(producer)) {\n    serialized.transition = producer.transition;\n  }\n\n  return serialized;\n}\n\n/**\n *\n * @param action The action to serialize\n * @returns SerializedAction\n */\nfunction serializeAction(action: ActionDirective): SerializedAction {\n  let serialized: SerializedAction = {\n    action: action.action.name,\n  };\n\n  if (action.success) {\n    if (isValidString(action.success)) {\n      serialized.success = action.success;\n    } else if (isProducer(action.success)) {\n      serialized.success = serializeProducer(action.success);\n    }\n  }\n\n  if (action.failure) {\n    if (isValidString(action.failure)) {\n      serialized.failure = action.failure;\n    } else if (isProducer(action.failure)) {\n      serialized.failure = serializeProducer(action.failure);\n    }\n  }\n\n  return serialized;\n}\n\n/**\n *\n * @param guard The guard to serialize\n * @returns SerializedGuard\n */\nfunction serializeGuard(guard: GuardDirective | NestedGuardDirective): SerializedGuard {\n  let serialized: SerializedGuard = {\n    guard: guard.guard.name,\n  };\n\n  if (isValidString(guard.failure)) {\n    serialized.failure = guard.failure;\n  } else if (isProducer(guard.failure)) {\n    serialized.failure = serializeProducer(guard.failure);\n  }\n\n  if (\"machine\" in guard) {\n    serialized.machine = serialize(guard.machine);\n  }\n\n  return serialized;\n}\n\n/**\n *\n * @param run The run collection to serialize\n * @returns SerializedCollection or null if empty\n */\nfunction serializeRunArguments(run: RunCollection): SerializedCollection | null {\n  if (!Array.isArray(run) || run.length === 0) {\n    return null;\n  }\n\n  return run.map((item) => {\n    if (isAction(item)) {\n      return serializeAction(item);\n    }\n\n    if (isProducer(item)) {\n      return serializeProducer(item);\n    }\n  }) as SerializedCollection;\n}\n\n/**\n *\n * @param guards The guards to serialize\n * @returns SerializedGuard[] or null if empty\n */\nfunction serializeGuards(guards: GuardsDirective): SerializedGuard[] | null {\n  if (!guards || guards.length === 0) {\n    return null;\n  }\n\n  return guards.map((guard) => serializeGuard(guard));\n}\n\n/**\n *\n * @param transition The transition to serialize\n * @returns SerializedTransition\n */\nfunction serializeTransition(transition: TransitionDirective): SerializedTransition {\n  let serialized: SerializedTransition = {\n    target: transition.target,\n  };\n\n  let guards = serializeGuards(transition.guards);\n\n  if (guards) {\n    serialized.guards = guards;\n  }\n\n  return serialized;\n}\n\n/**\n *\n * @param immediate The immediate transition to serialize\n * @returns SerializedImmediate\n */\nfunction serializeImmediate(immediate: ImmediateDirective): SerializedImmediate {\n  let serialized: SerializedImmediate = {\n    immediate: immediate.immediate,\n  };\n\n  let guards = serializeGuards(immediate.guards);\n\n  if (guards) {\n    serialized.guards = guards;\n  }\n\n  return serialized;\n}\n\n/**\n *\n * @param events The events to serialize\n * @returns SerializedTransitions or null if empty\n */\nfunction serializeTransitions(events: TransitionsDirective): SerializedTransitions | null {\n  if (!events || Object.keys(events).length === 0) {\n    return null;\n  }\n\n  let serialized: SerializedTransitions = {};\n  for (let event in events) {\n    serialized[event] = serializeTransition(events[event]);\n  }\n\n  return serialized;\n}\n\n/**\n *\n * @param context The context to serialize\n * @returns Object\n */\nfunction serializeContext(context: any) {\n  return cloneContext(context);\n}\n\n/**\n *\n * @param nested The nested machines to serialize\n * @returns SerializedNestedMachine[] or null if empty\n */\nfunction serializeNested(nested: NestedMachineDirective[]): SerializedNestedMachine[] | null {\n  if (!nested || nested.length === 0) {\n    return null;\n  }\n\n  return nested.map(({ machine, transition }) => {\n    let serializedNestedMachine: SerializedNestedMachine = {\n      machine: serialize(machine),\n    };\n\n    if (transition) {\n      serializedNestedMachine.transition = transition;\n    }\n\n    return serializedNestedMachine;\n  });\n}\n\n/**\n *\n * @param machine The machine to serialize\n * @returns SerializedMachine\n * @category Serialization\n */\nexport function serialize(machine: Machine): SerializedMachine {\n  let serialized: SerializedMachine = {\n    states: {},\n    parallel: {},\n    context: serializeContext(machine.context),\n    initial: machine.initial,\n  };\n\n  if (machine.title) {\n    serialized.title = machine.title;\n  }\n\n  for (let state in machine.states) {\n    serialized.states[state] = {} as SerializedState;\n\n    let nested = serializeNested(machine.states[state].nested);\n    if (nested) {\n      serialized.states[state].nested = nested;\n    }\n\n    let run = serializeRunArguments(machine.states[state].run);\n    if (run) {\n      serialized.states[state].run = run;\n    }\n\n    let on = serializeTransitions(machine.states[state].on);\n    if (on) {\n      serialized.states[state].on = on;\n    }\n\n    let immediate = machine.states[state].immediate;\n    if (immediate.length) {\n      let serializedImmediate: SerializedImmediate[] = [];\n      for (let immediateDirective of immediate) {\n        serializedImmediate.push(serializeImmediate(immediateDirective));\n      }\n      serialized.states[state].immediate = serializedImmediate;\n    }\n\n    if (isValidString(machine.states[state].type)) {\n      serialized.states[state].type = machine.states[state].type;\n    }\n\n    if (isValidString(machine.states[state].description)) {\n      serialized.states[state].description = machine.states[state].description;\n    }\n  }\n\n  for (let parallel in machine.parallel) {\n    serialized.parallel[parallel] = serialize(machine.parallel[parallel]);\n  }\n\n  return serialized;\n}\n","/** @module x-robot/utils */\nimport {\n  ActionDirective,\n  ContextDirective,\n  DescriptionDirective,\n  GuardDirective,\n  ImmediateDirective,\n  InitialDirective,\n  Machine,\n  NestedGuardDirective,\n  NestedImmediateDirective,\n  NestedMachineDirective,\n  NestedMachineWithTransitionDirective,\n  ParallelDirective,\n  ParallelImmediateDirective,\n  ProducerDirective,\n  ProducerDirectiveWithTransition,\n  ProducerDirectiveWithoutTransition,\n  START_EVENT,\n  ShouldFreezeDirective,\n  StateDirective,\n  StatesDirective,\n  TransitionDirective\n} from \"./machine/interfaces\";\n\nexport function isValidString(str?: any): str is string {\n  return str !== null && typeof str === \"string\" && str.trim().length > 0;\n}\n\nexport function isValidObject(obj: any): obj is object {\n  return obj !== null && typeof obj === \"object\";\n}\n\nexport function isProducer(producer?: any): producer is ProducerDirective {\n  return isValidObject(producer) && \"producer\" in producer;\n}\n\nexport function isProducerWithTransition(\n  producer?: any\n): producer is ProducerDirectiveWithTransition {\n  return isProducer(producer) && isValidString(producer.transition);\n}\n\nexport function isProducerWithoutTransition(\n  producer?: any\n): producer is ProducerDirectiveWithoutTransition {\n  return !isProducerWithTransition(producer);\n}\n\nexport function isAction(action?: any): action is ActionDirective {\n  return isValidObject(action) && \"action\" in action;\n}\n\nexport function isImmediate(immediate?: any): immediate is ImmediateDirective {\n  return isValidObject(immediate) && \"immediate\" in immediate;\n}\n\nexport function isGuard(guard?: any): guard is GuardDirective {\n  return isValidObject(guard) && \"guard\" in guard;\n}\n\nexport function isNestedGuard(guard?: any): guard is NestedGuardDirective {\n  return isGuard(guard) && \"machine\" in guard;\n}\n\nexport function isTransition(\n  transition?: any\n): transition is TransitionDirective {\n  return (\n    isValidObject(transition) &&\n    \"transition\" in transition &&\n    \"target\" in transition\n  );\n}\n\nexport function hasTransition(\n  state: StateDirective,\n  transition: string\n): boolean {\n  return isValidString(transition) && transition in state.on;\n}\n\nexport function hasState(machine: Machine, state: string): boolean {\n  return isValidString(state) && state in machine.states;\n}\n\nexport function isNestedMachineDirective(\n  machine?: any\n): machine is NestedMachineDirective {\n  return isValidObject(machine) && \"machine\" in machine;\n}\n\nexport function isNestedMachineWithTransitionDirective(\n  machine?: any\n): machine is NestedMachineWithTransitionDirective {\n  return isNestedMachineDirective(machine) && isValidString(machine.transition);\n}\n\nexport function isMachine(machine?: any): machine is Machine {\n  return (\n    isValidObject(machine) &&\n    \"states\" in machine &&\n    \"initial\" in machine &&\n    \"current\" in machine\n  );\n}\n\nexport function isStateDirective(state?: any): state is StateDirective {\n  return (\n    isValidObject(state) &&\n    \"name\" in state &&\n    \"run\" in state &&\n    \"on\" in state &&\n    \"args\" in state\n  );\n}\n\nexport function isContextDirective(context?: any): context is ContextDirective {\n  return isValidObject(context) && \"context\" in context;\n}\n\nexport function isStatesDirective(states?: any): states is StatesDirective {\n  return (\n    isValidObject(states) &&\n    Object.keys(states).every((key) => isValidString(key)) &&\n    Object.values(states).every((state) => isStateDirective(state))\n  );\n}\n\nexport function isParallelDirective(\n  parallel?: any\n): parallel is ParallelDirective {\n  return isValidObject(parallel) && \"parallel\" in parallel;\n}\n\nexport function isShouldFreezeDirective(\n  shouldFreeze?: any\n): shouldFreeze is ShouldFreezeDirective {\n  return isValidObject(shouldFreeze) && \"freeze\" in shouldFreeze;\n}\n\nexport function isInitialDirective(initial?: any): initial is InitialDirective {\n  return isValidObject(initial) && \"initial\" in initial;\n}\n\nexport function isDescriptionDirective(\n  description?: any\n): description is DescriptionDirective {\n  return isValidObject(description) && \"description\" in description;\n}\n\nexport function isNestedTransition(transition?: any): boolean {\n  return isValidString(transition) && /^\\w+\\..+$/gi.test(transition);\n}\n\nexport function isParallelTransition(transition?: any): boolean {\n  return isValidString(transition) && /^\\w+\\/.+$/gi.test(transition);\n}\n\nexport function isNestedImmediateDirective(\n  immediate?: any\n): immediate is NestedImmediateDirective {\n  return isImmediate(immediate) && isNestedTransition(immediate.immediate);\n}\n\nexport function isParallelImmediateDirective(\n  immediate?: any\n): immediate is ParallelImmediateDirective {\n  return isImmediate(immediate) && isParallelTransition(immediate.immediate);\n}\n\n/**\n * This method is used to deep freeze an object\n * @param {Object} obj The object to freeze\n * @returns {Object} Object frozen\n */\nexport function deepFreeze(obj: any) {\n  if (typeof obj === \"object\" && obj !== null && !Object.isFrozen(obj)) {\n    if (Array.isArray(obj)) {\n      for (let i = 0, l = obj.length; i < l; i++) {\n        deepFreeze(obj[i]);\n      }\n    } else {\n      for (let prop in obj) {\n        deepFreeze(obj[prop]);\n      }\n    }\n    Object.freeze(obj);\n  }\n\n  return obj;\n}\n\n// Creates a deep copy of the context\n// @param {Object} context\n// @returns {Object}\nexport function cloneContext(context: any, weakMap = new WeakMap()): any {\n  // If context is in the weak map, we will use the weak map value\n  if (weakMap.has(context)) {\n    return weakMap.get(context);\n  }\n\n  // If context is null or undefined, we will return it as is\n  if (context === null || context === undefined) {\n    return context;\n  }\n\n  let result;\n\n  // Check for every type of object property and clone it accordingly\n  // If is an array, we will clone it recursively\n  if (Array.isArray(context)) {\n    result = context.map((item) => cloneContext(item, weakMap));\n  }\n\n  // If it is an object, we will clone it recursively\n  else if (typeof context === \"object\") {\n    result = {} as any;\n    for (let key in context) {\n      result[key] = cloneContext(context[key], weakMap);\n    }\n  }\n\n  // If it is a date, we will clone it\n  else if (context instanceof Date) {\n    result = new Date(context.getTime());\n  }\n\n  // If it is a Set, we will clone it recursively\n  else if (context instanceof Set) {\n    result = new Set(context);\n  }\n\n  // If it is a Map, we will clone it recursively\n  else if (context instanceof Map) {\n    let array = Array.from(context, ([key, val]) => [\n      key,\n      cloneContext(val, weakMap)\n    ]) as [any, any][];\n    result = new Map(array);\n  }\n\n  // If it is a RegExp, we will clone it\n  else if (context instanceof RegExp) {\n    return new RegExp(context.source, context.flags);\n  }\n\n  // If it is a instance of a class, we create a new instance of the class\n  // Only if we turn the first parameter to true\n  else if (false && context instanceof Object && context.constructor) {\n    result = new context.constructor(context);\n  }\n\n  // If it is a primitive, we will just assign it\n  else {\n    result = context;\n    return result;\n  }\n\n  // Add the context to the weak map\n  weakMap.set(context, result);\n\n  // Return the cloned context\n  return result;\n}\n\n// This method allows to get a value from a passed object using dot notation path, it is not used in the library at the moment\nfunction getProperty(\n  obj: Record<string | number | symbol, any>,\n  property: string,\n  defaultValue?: any\n): any {\n  let result = obj;\n\n  if (typeof property === \"undefined\") {\n    throw new Error(\"Property is undefined\");\n  }\n\n  let parsed = property.split(\".\");\n  let next;\n\n  while (parsed.length) {\n    next = parsed.shift();\n\n    if (typeof next === \"undefined\") {\n      break;\n    }\n\n    if (next.indexOf(\"[\") > -1) {\n      let idx = next.replace(/\\D/gi, \"\");\n      next = next.split(\"[\")[0];\n      parsed.unshift(idx);\n    }\n\n    if (\n      next in result === false ||\n      (parsed.length > 0 && typeof result[next] !== \"object\")\n    ) {\n      return defaultValue;\n    }\n\n    result = result[next];\n  }\n\n  return typeof result === \"undefined\" ? defaultValue : result;\n}\n\n/**\n *\n * @param machine The machine that is currently running\n * @param currentStateObject The current state of the machine\n * @param transition The transition that we want to execute\n * @returns boolean true if the transition can be executed, false otherwise\n */\nexport function canMakeTransition(\n  machine: Machine,\n  currentStateObject: StateDirective,\n  transition: string\n): boolean {\n  if (!isValidString(transition)) {\n    throw new Error(`Invalid transition: ${transition}`);\n  }\n\n  let trimmedTransition = transition.trim();\n\n  // If the transition is the START_EVENT we will return true if the current state is the initial state and we have no history\n  if (trimmedTransition === START_EVENT) {\n    return (\n      currentStateObject.name === machine.initial &&\n      machine.history.length === 1\n    );\n  }\n\n  // Check if we have a normal transition or a nested transition (nested transitions are dot separated)\n  if (\n    isNestedTransition(trimmedTransition) ||\n    isParallelTransition(trimmedTransition)\n  ) {\n    // Get the nested transition parts\n    let transitionParts = isNestedTransition(trimmedTransition)\n      ? trimmedTransition.split(\".\")\n      : trimmedTransition.split(\"/\");\n    // The first part must be the current state\n    let stateName = transitionParts.shift();\n    // The second part must be the transition\n    let transitionName = isNestedTransition(trimmedTransition)\n      ? transitionParts.join(\".\")\n      : transitionParts.join(\"/\");\n\n    // If we have no stateName, we can't make a transition\n    if (!stateName) {\n      return false;\n    }\n\n    // If the stateName is in the parallel object check if we can make the transition in the parallel machine\n    if (stateName in machine.parallel) {\n      let parallelMachine = machine.parallel[stateName];\n      return canMakeTransition(\n        parallelMachine,\n        parallelMachine.states[parallelMachine.current],\n        transitionName\n      );\n    }\n\n    // If the current state name is not the same as the stateName return false\n    if (stateName !== currentStateObject.name) {\n      return false;\n    }\n\n    // If the current state doesn't have a nested machine return false\n    if (currentStateObject.nested.length === 0) {\n      return false;\n    }\n\n    // We loop through the nested machines and check if we can make the transition\n    for (let nestedMachine of currentStateObject.nested) {\n      if (\n        canMakeTransition(\n          nestedMachine.machine,\n          nestedMachine.machine.states[nestedMachine.machine.current],\n          transitionName\n        )\n      ) {\n        return true;\n      }\n    }\n  }\n\n  // If we get here, we have a normal transition\n  return hasTransition(currentStateObject, trimmedTransition);\n}\n\nexport const titleToId = (str: string) =>\n  str.toLowerCase().replace(/(\\s|\\W)/g, \"\");\n"],"mappings":"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"}