//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"names":["lib_exports","__export","action","context","dangerState","description","getState","guard","immediate","infoState","initial","invoke","machine","nested","nestedGuard","parallel","primaryState","producer","start","state","states","successState","transition","warningState","__EXPORTS__","START_EVENT","isValidString","str","trim","length","isValidObject","obj","isProducer","producer2","isProducerWithTransition","isAction","action2","isImmediate","immediate2","isGuard","guard2","isNestedGuard","hasTransition","state2","transition2","on","isNestedMachineDirective","machine2","isNestedMachineWithTransitionDirective","isStatesDirective","states2","Object","keys","every","key","values","isStateDirective","isDescriptionDirective","description2","isNestedTransition","test","isParallelTransition","isNestedImmediateDirective","isParallelImmediateDirective","deepFreeze","isFrozen","Array","isArray","i","l","prop","freeze","cloneContext","context2","weakMap","WeakMap","has","get","result","map","item","Date","getTime","Set","Map","RegExp","source","flags","array","from","val","set","canMakeTransition","currentStateObject","Error","trimmedTransition","name","history","transitionParts","split","stateName","shift","transitionName","join","parallelMachine","current","nestedMachine","title","args","myMachine","id","toLowerCase","replace","frozen","isAsync","shouldFreeze","initial2","parallel2","arg","newContext","push","run","find","newStates","machines","nested2","successTransition","success","target","guards","failureTransition","failure","type","onSuccessProducer","onFailureProducer","stateObject","path","isMachine","parallelName","pathParts","nestedMachineId","runProducer","payload","async","runAction","error","hasFatalError","fatal","catchError","runNestedMachines","promise","Promise","resolve","then","invokeImmediateDirectives","immediateDirective","parallelMachineId","parallelTransition","parallelTransitionParts","runParallelTransition","nestedTransitionParts","nestedTransition","nestedMachineDirective","currentNestedState","runNestedTransition","transitionObject","shouldContinue","runGuards","targetState","targetStateObject","runActionsAndProducers","runProducers"],"sources":["../lib/index.ts","../lib/machine/interfaces.ts","../lib/utils.ts","../lib/machine/create.ts","../lib/machine/invoke.ts"],"sourcesContent":["/**\n * @module x-robot\n * @description X-Robot is a finite state machine library for nodejs and for the web.\n * */\n\nimport {\n  action,\n  context,\n  dangerState,\n  description,\n  getState,\n  guard,\n  immediate,\n  infoState,\n  initial,\n  machine,\n  nested,\n  nestedGuard,\n  parallel,\n  primaryState,\n  producer,\n  state,\n  states,\n  successState,\n  transition,\n  warningState\n} from \"./machine/create\";\nimport { invoke, start } from \"./machine/invoke\";\n\nexport {\n  machine,\n  nested,\n  context,\n  initial,\n  parallel,\n  states,\n  state,\n  infoState,\n  warningState,\n  successState,\n  dangerState,\n  primaryState,\n  description,\n  guard,\n  nestedGuard,\n  producer,\n  action,\n  transition,\n  immediate,\n  invoke,\n  start,\n  getState,\n};\n","/** @module x-robot */\nexport interface MachineArguments\n  extends Array<\n    | string\n    | ContextDirective\n    | InitialDirective\n    | ShouldFreezeDirective\n    | StatesDirective\n    | ParallelDirective\n  > {}\n\nexport interface Context {\n  [key: string]: any;\n}\n\nexport interface TransitionDirective {\n  transition: string;\n  target: string;\n  guards: GuardsDirective;\n}\n\nexport interface TransitionsDirective {\n  [key: string]: TransitionDirective;\n}\n\nexport interface ImmediateDirective {\n  immediate: string;\n  guards: GuardsDirective;\n}\n\nexport interface NestedImmediateDirective extends ImmediateDirective {\n  immediate: string;\n  guards: GuardsDirective;\n}\n\nexport interface ParallelImmediateDirective extends ImmediateDirective {\n  immediate: string;\n  guards: GuardsDirective;\n}\n\nexport interface Producer {\n  (context: Context, payload?: any): Context | void;\n}\n\nexport interface ProducerDirective {\n  producer: Producer;\n  transition?: string;\n}\n\nexport interface ProducerDirectiveWithTransition extends ProducerDirective {\n  transition: string;\n}\n\nexport interface ProducerDirectiveWithoutTransition {\n  producer: Producer;\n}\n\nexport interface Action {\n  (context: Context, payload?: any): Promise<void | any>;\n}\n\nexport interface ActionDirective {\n  action: Action;\n  success?: ProducerDirective | string | null;\n  failure?: ProducerDirective | string | null;\n}\n\nexport interface Guard {\n  (context: Context, payload?: any): boolean | any;\n}\n\nexport interface GuardDirective {\n  guard: Guard;\n  failure?: ProducerDirectiveWithoutTransition;\n}\n\nexport interface NestedGuardDirective extends GuardDirective {\n  machine: Machine;\n}\n\nexport interface GuardsDirective\n  extends Array<GuardDirective | NestedGuardDirective> {}\n\nexport interface DescriptionDirective {\n  description: string;\n}\n\nexport interface RunCollection\n  extends Array<\n    | NestedMachineDirective\n    | ActionDirective\n    | ProducerDirectiveWithoutTransition\n    | TransitionDirective\n    | ImmediateDirective\n    | DescriptionDirective\n  > {}\n\nexport interface StateDirective {\n  name: string;\n  run: (ActionDirective | ProducerDirective)[];\n  on: TransitionsDirective;\n  immediate: ImmediateDirective[];\n  args: (\n    | NestedMachineDirective\n    | ActionDirective\n    | ProducerDirective\n    | TransitionDirective\n    | ImmediateDirective\n    | DescriptionDirective\n  )[];\n  type: string;\n  nested: NestedMachineDirective[];\n  description?: string;\n}\n\nexport interface InfoStateDirective extends StateDirective {\n  type: \"info\";\n}\n\nexport interface WarningStateDirective extends StateDirective {\n  type: \"warning\";\n}\n\nexport interface DangerStateDirective extends StateDirective {\n  type: \"danger\";\n}\n\nexport interface PrimaryStateDirective extends StateDirective {\n  type: \"primary\";\n}\n\nexport interface SuccessStateDirective extends StateDirective {\n  type: \"success\";\n}\n\nexport interface StatesDirective {\n  [key: string]: StateDirective;\n}\n\nexport interface ParallelDirective {\n  parallel: Record<string, Machine>;\n}\n\nexport interface Machine {\n  id: string; // This will be the title of the machine in snake case (e.g. 'my-machine')\n  title: string | null;\n  context: Context;\n  isAsync: boolean;\n  states: StatesDirective;\n  initial: string;\n  current: string;\n  frozen: boolean;\n  fatal?: Error;\n  history: string[];\n  parallel: ParallelDirective[\"parallel\"];\n}\n\nexport interface NestedMachineDirective {\n  machine: Machine;\n  transition?: string;\n}\n\nexport interface NestedMachineWithTransitionDirective\n  extends NestedMachineDirective {\n  transition: string;\n}\n\nexport interface ContextDirective {\n  context: Context;\n}\n\nexport interface InitialDirective {\n  initial: string;\n}\n\nexport interface ShouldFreezeDirective {\n  freeze: boolean;\n}\n\nexport enum HistoryType {\n  Transition = \"Transition\",\n  Action = \"Action\",\n  Producer = \"Producer\",\n  State = \"State\",\n  Guard = \"Guard\"\n}\n\nexport const START_EVENT = \"__start__\";\n","/** @module x-robot/utils */\nimport {\n  ActionDirective,\n  ContextDirective,\n  DescriptionDirective,\n  GuardDirective,\n  ImmediateDirective,\n  InitialDirective,\n  Machine,\n  NestedGuardDirective,\n  NestedImmediateDirective,\n  NestedMachineDirective,\n  NestedMachineWithTransitionDirective,\n  ParallelDirective,\n  ParallelImmediateDirective,\n  ProducerDirective,\n  ProducerDirectiveWithTransition,\n  ProducerDirectiveWithoutTransition,\n  START_EVENT,\n  ShouldFreezeDirective,\n  StateDirective,\n  StatesDirective,\n  TransitionDirective\n} from \"./machine/interfaces\";\n\nexport function isValidString(str?: any): str is string {\n  return str !== null && typeof str === \"string\" && str.trim().length > 0;\n}\n\nexport function isValidObject(obj: any): obj is object {\n  return obj !== null && typeof obj === \"object\";\n}\n\nexport function isProducer(producer?: any): producer is ProducerDirective {\n  return isValidObject(producer) && \"producer\" in producer;\n}\n\nexport function isProducerWithTransition(\n  producer?: any\n): producer is ProducerDirectiveWithTransition {\n  return isProducer(producer) && isValidString(producer.transition);\n}\n\nexport function isProducerWithoutTransition(\n  producer?: any\n): producer is ProducerDirectiveWithoutTransition {\n  return !isProducerWithTransition(producer);\n}\n\nexport function isAction(action?: any): action is ActionDirective {\n  return isValidObject(action) && \"action\" in action;\n}\n\nexport function isImmediate(immediate?: any): immediate is ImmediateDirective {\n  return isValidObject(immediate) && \"immediate\" in immediate;\n}\n\nexport function isGuard(guard?: any): guard is GuardDirective {\n  return isValidObject(guard) && \"guard\" in guard;\n}\n\nexport function isNestedGuard(guard?: any): guard is NestedGuardDirective {\n  return isGuard(guard) && \"machine\" in guard;\n}\n\nexport function isTransition(\n  transition?: any\n): transition is TransitionDirective {\n  return (\n    isValidObject(transition) &&\n    \"transition\" in transition &&\n    \"target\" in transition\n  );\n}\n\nexport function hasTransition(\n  state: StateDirective,\n  transition: string\n): boolean {\n  return isValidString(transition) && transition in state.on;\n}\n\nexport function hasState(machine: Machine, state: string): boolean {\n  return isValidString(state) && state in machine.states;\n}\n\nexport function isNestedMachineDirective(\n  machine?: any\n): machine is NestedMachineDirective {\n  return isValidObject(machine) && \"machine\" in machine;\n}\n\nexport function isNestedMachineWithTransitionDirective(\n  machine?: any\n): machine is NestedMachineWithTransitionDirective {\n  return isNestedMachineDirective(machine) && isValidString(machine.transition);\n}\n\nexport function isMachine(machine?: any): machine is Machine {\n  return (\n    isValidObject(machine) &&\n    \"states\" in machine &&\n    \"initial\" in machine &&\n    \"current\" in machine\n  );\n}\n\nexport function isStateDirective(state?: any): state is StateDirective {\n  return (\n    isValidObject(state) &&\n    \"name\" in state &&\n    \"run\" in state &&\n    \"on\" in state &&\n    \"args\" in state\n  );\n}\n\nexport function isContextDirective(context?: any): context is ContextDirective {\n  return isValidObject(context) && \"context\" in context;\n}\n\nexport function isStatesDirective(states?: any): states is StatesDirective {\n  return (\n    isValidObject(states) &&\n    Object.keys(states).every((key) => isValidString(key)) &&\n    Object.values(states).every((state) => isStateDirective(state))\n  );\n}\n\nexport function isParallelDirective(\n  parallel?: any\n): parallel is ParallelDirective {\n  return isValidObject(parallel) && \"parallel\" in parallel;\n}\n\nexport function isShouldFreezeDirective(\n  shouldFreeze?: any\n): shouldFreeze is ShouldFreezeDirective {\n  return isValidObject(shouldFreeze) && \"freeze\" in shouldFreeze;\n}\n\nexport function isInitialDirective(initial?: any): initial is InitialDirective {\n  return isValidObject(initial) && \"initial\" in initial;\n}\n\nexport function isDescriptionDirective(\n  description?: any\n): description is DescriptionDirective {\n  return isValidObject(description) && \"description\" in description;\n}\n\nexport function isNestedTransition(transition?: any): boolean {\n  return isValidString(transition) && /^\\w+\\..+$/gi.test(transition);\n}\n\nexport function isParallelTransition(transition?: any): boolean {\n  return isValidString(transition) && /^\\w+\\/.+$/gi.test(transition);\n}\n\nexport function isNestedImmediateDirective(\n  immediate?: any\n): immediate is NestedImmediateDirective {\n  return isImmediate(immediate) && isNestedTransition(immediate.immediate);\n}\n\nexport function isParallelImmediateDirective(\n  immediate?: any\n): immediate is ParallelImmediateDirective {\n  return isImmediate(immediate) && isParallelTransition(immediate.immediate);\n}\n\n/**\n * This method is used to deep freeze an object\n * @param {Object} obj The object to freeze\n * @returns {Object} Object frozen\n */\nexport function deepFreeze(obj: any) {\n  if (typeof obj === \"object\" && obj !== null && !Object.isFrozen(obj)) {\n    if (Array.isArray(obj)) {\n      for (let i = 0, l = obj.length; i < l; i++) {\n        deepFreeze(obj[i]);\n      }\n    } else {\n      for (let prop in obj) {\n        deepFreeze(obj[prop]);\n      }\n    }\n    Object.freeze(obj);\n  }\n\n  return obj;\n}\n\n// Creates a deep copy of the context\n// @param {Object} context\n// @returns {Object}\nexport function cloneContext(context: any, weakMap = new WeakMap()): any {\n  // If context is in the weak map, we will use the weak map value\n  if (weakMap.has(context)) {\n    return weakMap.get(context);\n  }\n\n  // If context is null or undefined, we will return it as is\n  if (context === null || context === undefined) {\n    return context;\n  }\n\n  let result;\n\n  // Check for every type of object property and clone it accordingly\n  // If is an array, we will clone it recursively\n  if (Array.isArray(context)) {\n    result = context.map((item) => cloneContext(item, weakMap));\n  }\n\n  // If it is an object, we will clone it recursively\n  else if (typeof context === \"object\") {\n    result = {} as any;\n    for (let key in context) {\n      result[key] = cloneContext(context[key], weakMap);\n    }\n  }\n\n  // If it is a date, we will clone it\n  else if (context instanceof Date) {\n    result = new Date(context.getTime());\n  }\n\n  // If it is a Set, we will clone it recursively\n  else if (context instanceof Set) {\n    result = new Set(context);\n  }\n\n  // If it is a Map, we will clone it recursively\n  else if (context instanceof Map) {\n    let array = Array.from(context, ([key, val]) => [\n      key,\n      cloneContext(val, weakMap)\n    ]) as [any, any][];\n    result = new Map(array);\n  }\n\n  // If it is a RegExp, we will clone it\n  else if (context instanceof RegExp) {\n    return new RegExp(context.source, context.flags);\n  }\n\n  // If it is a instance of a class, we create a new instance of the class\n  // Only if we turn the first parameter to true\n  else if (false && context instanceof Object && context.constructor) {\n    result = new context.constructor(context);\n  }\n\n  // If it is a primitive, we will just assign it\n  else {\n    result = context;\n    return result;\n  }\n\n  // Add the context to the weak map\n  weakMap.set(context, result);\n\n  // Return the cloned context\n  return result;\n}\n\n// This method allows to get a value from a passed object using dot notation path, it is not used in the library at the moment\nfunction getProperty(\n  obj: Record<string | number | symbol, any>,\n  property: string,\n  defaultValue?: any\n): any {\n  let result = obj;\n\n  if (typeof property === \"undefined\") {\n    throw new Error(\"Property is undefined\");\n  }\n\n  let parsed = property.split(\".\");\n  let next;\n\n  while (parsed.length) {\n    next = parsed.shift();\n\n    if (typeof next === \"undefined\") {\n      break;\n    }\n\n    if (next.indexOf(\"[\") > -1) {\n      let idx = next.replace(/\\D/gi, \"\");\n      next = next.split(\"[\")[0];\n      parsed.unshift(idx);\n    }\n\n    if (\n      next in result === false ||\n      (parsed.length > 0 && typeof result[next] !== \"object\")\n    ) {\n      return defaultValue;\n    }\n\n    result = result[next];\n  }\n\n  return typeof result === \"undefined\" ? defaultValue : result;\n}\n\n/**\n *\n * @param machine The machine that is currently running\n * @param currentStateObject The current state of the machine\n * @param transition The transition that we want to execute\n * @returns boolean true if the transition can be executed, false otherwise\n */\nexport function canMakeTransition(\n  machine: Machine,\n  currentStateObject: StateDirective,\n  transition: string\n): boolean {\n  if (!isValidString(transition)) {\n    throw new Error(`Invalid transition: ${transition}`);\n  }\n\n  let trimmedTransition = transition.trim();\n\n  // If the transition is the START_EVENT we will return true if the current state is the initial state and we have no history\n  if (trimmedTransition === START_EVENT) {\n    return (\n      currentStateObject.name === machine.initial &&\n      machine.history.length === 1\n    );\n  }\n\n  // Check if we have a normal transition or a nested transition (nested transitions are dot separated)\n  if (\n    isNestedTransition(trimmedTransition) ||\n    isParallelTransition(trimmedTransition)\n  ) {\n    // Get the nested transition parts\n    let transitionParts = isNestedTransition(trimmedTransition)\n      ? trimmedTransition.split(\".\")\n      : trimmedTransition.split(\"/\");\n    // The first part must be the current state\n    let stateName = transitionParts.shift();\n    // The second part must be the transition\n    let transitionName = isNestedTransition(trimmedTransition)\n      ? transitionParts.join(\".\")\n      : transitionParts.join(\"/\");\n\n    // If we have no stateName, we can't make a transition\n    if (!stateName) {\n      return false;\n    }\n\n    // If the stateName is in the parallel object check if we can make the transition in the parallel machine\n    if (stateName in machine.parallel) {\n      let parallelMachine = machine.parallel[stateName];\n      return canMakeTransition(\n        parallelMachine,\n        parallelMachine.states[parallelMachine.current],\n        transitionName\n      );\n    }\n\n    // If the current state name is not the same as the stateName return false\n    if (stateName !== currentStateObject.name) {\n      return false;\n    }\n\n    // If the current state doesn't have a nested machine return false\n    if (currentStateObject.nested.length === 0) {\n      return false;\n    }\n\n    // We loop through the nested machines and check if we can make the transition\n    for (let nestedMachine of currentStateObject.nested) {\n      if (\n        canMakeTransition(\n          nestedMachine.machine,\n          nestedMachine.machine.states[nestedMachine.machine.current],\n          transitionName\n        )\n      ) {\n        return true;\n      }\n    }\n  }\n\n  // If we get here, we have a normal transition\n  return hasTransition(currentStateObject, trimmedTransition);\n}\n\nexport const titleToId = (str: string) =>\n  str.toLowerCase().replace(/(\\s|\\W)/g, \"\");\n","/**\n * @module x-robot\n * @description Create a new machine from a set of directives.\n * */\nimport {\n  Action,\n  ActionDirective,\n  Context,\n  ContextDirective,\n  DangerStateDirective,\n  DescriptionDirective,\n  Guard,\n  GuardDirective,\n  GuardsDirective,\n  HistoryType,\n  ImmediateDirective,\n  InfoStateDirective,\n  InitialDirective,\n  Machine,\n  MachineArguments,\n  NestedGuardDirective,\n  NestedMachineDirective,\n  ParallelDirective,\n  PrimaryStateDirective,\n  Producer,\n  ProducerDirective,\n  ProducerDirectiveWithoutTransition,\n  RunCollection,\n  ShouldFreezeDirective,\n  StateDirective,\n  StatesDirective,\n  SuccessStateDirective,\n  TransitionDirective,\n  TransitionsDirective,\n  WarningStateDirective\n} from \"./interfaces\";\nimport {\n  deepFreeze,\n  hasTransition,\n  isAction,\n  isContextDirective,\n  isDescriptionDirective,\n  isImmediate,\n  isInitialDirective,\n  isMachine,\n  isNestedImmediateDirective,\n  isNestedMachineDirective,\n  isParallelDirective,\n  isParallelImmediateDirective,\n  isProducer,\n  isProducerWithTransition,\n  isShouldFreezeDirective,\n  isStatesDirective,\n  isTransition,\n  isValidObject,\n  isValidString,\n  titleToId\n} from \"../utils\";\n\n/**\n * We will create a finite state machine manager\n *\n * This manager will handle the creation of the finite state machine\n * It must be functional and immutable\n * And it must be able to be serialized and return a JSON object representing the state machine\n * */\n\n/**\n * Creates a new machine\n * @param title Title of the machine - This will be used to generate the id of the machine\n * @param args Arguments to the machine\n * @returns Machine\n * @category Creation\n */\nexport function machine(title: string, ...args: MachineArguments): Machine {\n  // Create the machine\n  let myMachine: Machine = {\n    id: titleToId(title || \"x-robot\"),\n    title,\n    states: {},\n    context: {},\n    initial: \"\",\n    current: \"\",\n    frozen: true,\n    isAsync: false,\n    history: [],\n    parallel: {}\n  };\n\n  for (let arg of args) {\n    // If arg is a string then it is the title\n    if (isValidString(arg)) {\n      title = arg;\n    }\n\n    // If the argument is a states directive then merge it into the states\n    if (isStatesDirective(arg)) {\n      myMachine.states = { ...myMachine.states, ...arg };\n    }\n\n    // If the argument is a parallel directive then merge it into the parallel\n    if (isParallelDirective(arg)) {\n      myMachine.parallel = { ...myMachine.parallel, ...arg.parallel };\n    }\n\n    // If the argument is a context directive then merge it into the context\n    if (isContextDirective(arg)) {\n      let newContext =\n        typeof arg.context === \"function\" ? arg.context() : arg.context;\n      if (!isValidObject(newContext)) {\n        throw new Error(\n          \"The context passed to the machine must be an object or a function that returns an object.\"\n        );\n      }\n\n      myMachine.context = { ...myMachine.context, ...newContext };\n    }\n\n    // If the argument is an initial directive then set the initial state\n    if (isInitialDirective(arg)) {\n      myMachine.initial = arg.initial;\n      myMachine.current = myMachine.initial;\n      myMachine.history.push(`${HistoryType.State}: ${myMachine.initial}`);\n    }\n\n    // If the argument is a shouldFreeze directive then set the freeze flag\n    if (isShouldFreezeDirective(arg)) {\n      myMachine.frozen = arg.freeze;\n    }\n  }\n\n  // If freeze is true, we will deep freeze the context\n  if (myMachine.frozen) {\n    deepFreeze(myMachine.context);\n  }\n\n  // Find if the machine is async, if so, add the async property\n  // Machin is async if there is a state with an action in the run array\n  for (let state in myMachine.states) {\n    if (myMachine.states[state].run.length > 0) {\n      // Find an action in the run array\n      let action = myMachine.states[state].run.find(isAction);\n      if (action) {\n        myMachine.isAsync = true;\n        break;\n      }\n    }\n  }\n\n  // If machine isn't async, we should check if there are any nested machines that are async, if so, we should turn the async flag on\n  if (myMachine.isAsync === false) {\n    for (let state in myMachine.states) {\n      if (myMachine.states[state].nested.length > 0) {\n        for (let nestedMachine of myMachine.states[state].nested) {\n          if (nestedMachine.machine.isAsync) {\n            myMachine.isAsync = true;\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  // If machine isn't async, we should check if there are any parallel machines that are async, if so, we should turn the async flag on\n  if (myMachine.isAsync === false) {\n    for (let parallel in myMachine.parallel) {\n      if (myMachine.parallel[parallel].isAsync) {\n        myMachine.isAsync = true;\n        break;\n      }\n    }\n  }\n\n  // Return the machine\n  return myMachine;\n}\n\n/**\n * @param states Array of state directives made with the state method\n * @returns StatesDirective\n * @category Creation\n */\nexport function states(...states: StateDirective[]): StatesDirective {\n  let newStates: StatesDirective = {};\n\n  for (let state of states) {\n    newStates[state.name] = state;\n  }\n\n  return newStates;\n}\n\n/**\n *\n * @param machines Array of parallel machines\n * @returns ParallelDirective\n * @category Creation\n */\nexport function parallel(...machines: Machine[]): ParallelDirective {\n  let obj: ParallelDirective = { parallel: {} };\n\n  for (let machine of machines) {\n    obj.parallel[machine.id] = machine;\n  }\n\n  return obj;\n}\n\n/**\n *\n * @param context The context to be passed to the machine, can be a function that returns an object\n * @returns ContextDirective\n * @category Creation\n */\nexport function context(context: Context | Function): ContextDirective {\n  return {\n    context\n  };\n}\n\n/**\n *\n * @param initial The initial state of the machine\n * @returns InitialDirective\n * @category Creation\n */\nexport function initial(initial: string): InitialDirective {\n  return {\n    initial\n  };\n}\n\n/**\n *\n * @param freeze If false the machine will not be frozen. The machine will be frozen by default.\n * @returns ShouldFreezeDirective\n * @category Creation\n */\nexport function shouldFreeze(freeze: boolean): ShouldFreezeDirective {\n  return {\n    freeze\n  };\n}\n\n/**\n *\n * @param name The name of the state\n * @param args nested machines, actions, producers, transitions, etc.\n * @returns StateDirective\n * @category Creation\n */\nexport function state(name: string, ...args: RunCollection): StateDirective {\n  let run: (ActionDirective | ProducerDirective)[] = [];\n  let on: TransitionsDirective = {};\n  let immediate: ImmediateDirective[] = [];\n  let nested: NestedMachineDirective[] = [];\n  let description;\n\n  for (let i = 0; i < args.length; i++) {\n    let arg = args[i];\n    // If is a nested machine\n    if (isNestedMachineDirective(arg)) {\n      nested.push(arg);\n      // If is action or producer add it to the run array\n    } else if (isAction(arg) || isProducer(arg)) {\n      run.push(arg);\n\n      // If is an action and has a success transition or a failure transition, then try to add them to the on object\n      if (isAction(arg)) {\n        let successTransition = isValidString(arg.success)\n          ? arg.success\n          : isProducerWithTransition(arg.success)\n          ? arg.success.transition\n          : null;\n        // If success is a transition\n        if (\n          isValidString(successTransition) &&\n          hasTransition({ on } as StateDirective, successTransition) === false\n        ) {\n          on[successTransition] = {\n            transition: successTransition,\n            target: successTransition,\n            guards: []\n          };\n        }\n\n        let failureTransition = isValidString(arg.failure)\n          ? arg.failure\n          : isProducerWithTransition(arg.failure)\n          ? arg.failure.transition\n          : null;\n        // If failure is a transition\n        if (\n          isValidString(failureTransition) &&\n          hasTransition({ on } as StateDirective, failureTransition) === false\n        ) {\n          on[failureTransition] = {\n            transition: failureTransition,\n            target: failureTransition,\n            guards: []\n          };\n        }\n      }\n\n      // If is immediate transition\n    } else if (isImmediate(arg)) {\n      // Add the immediate transition to the immediate array\n      immediate.push(arg);\n\n      let transition = arg.immediate;\n      let guards = arg.guards;\n\n      // If the immediate transition is not a nested or parallel machine then add it to the on object\n      if (\n        !isNestedImmediateDirective(arg) &&\n        !isParallelImmediateDirective(arg)\n      ) {\n        // We turn the immediate transition into a normal transition so that the machine can handle it\n        on[transition] = { target: transition, transition: transition, guards };\n      }\n\n      // if is a transition\n    } else if (isTransition(arg)) {\n      on[arg.transition] = arg;\n    } else if (isDescriptionDirective(arg)) {\n      description = arg.description;\n    }\n  }\n\n  return {\n    name,\n    nested,\n    run,\n    on,\n    immediate,\n    args,\n    type: \"default\",\n    description\n  };\n}\n\n/**\n *\n * @param transitionName The name of the transition\n * @param target The target state of the transition\n * @param guards The guards of the transition\n * @returns TransitionDirective\n * @category Creation\n */\nexport function transition(\n  transitionName: string,\n  target: string,\n  ...guards: GuardsDirective\n): TransitionDirective {\n  return {\n    transition: transitionName,\n    target,\n    guards\n  };\n}\n\n/**\n *\n * @param action The action to be run\n * @param onSuccessProducer The producer to be run on success with an optional transition name or a transition name\n * @param onFailureProducer The producer to be run on failure with an optional transition name or a transition name\n * @returns ActionDirective\n * @category Creation\n */\nexport function action(\n  action: Action,\n  onSuccessProducer?: ProducerDirective | string | null,\n  onFailureProducer?: ProducerDirective | string | null\n): ActionDirective {\n  return {\n    action,\n    success: onSuccessProducer,\n    failure: onFailureProducer\n  };\n}\n\n/**\n *\n * @param guard The guard to be run\n * @param onFailureProducer The producer to be run on failure, this producer should not have a transition name\n * @returns GuardDirective\n * @category Creation\n */\nexport function guard(\n  guard: Guard,\n  onFailureProducer?: ProducerDirectiveWithoutTransition\n): GuardDirective {\n  return {\n    guard,\n    failure: onFailureProducer\n  };\n}\n\n/**\n *\n * @param producer The producer to be run\n * @param transition The transition to be run on producer processed if the logic in which the producer is run allows it\n * @returns ProducerDirective\n * @category Creation\n */\nexport function producer(\n  producer: Producer,\n  transition?: string\n): ProducerDirective | ProducerDirectiveWithoutTransition {\n  return {\n    producer,\n    transition\n  };\n}\n\n/**\n *\n * @param target The target state of the transition\n * @param guards The guards of the transition\n * @returns ImmediateDirective\n * @category Creation\n */\nexport function immediate(\n  target: string,\n  ...guards: GuardsDirective\n): ImmediateDirective {\n  return {\n    immediate: target,\n    guards\n  };\n}\n\n/**\n * This method returns a nested guard directive.\n * It works like the guard directive but it receives the nested machine context as the first argument instead of the parent machine context.\n *\n * @param machine The nested machine to be run\n * @param guard The guard to be run\n * @param onFailureProducer The producer to be run on failure, this producer should not have a transition name\n * @returns NestedGuardDirective\n * @category Creation\n */\nexport function nestedGuard(\n  machine: Machine,\n  guard: Guard,\n  onFailureProducer?: ProducerDirectiveWithoutTransition\n): NestedGuardDirective {\n  return {\n    guard,\n    machine,\n    failure: onFailureProducer\n  };\n}\n\n/**\n *\n * @param machine The nested machine to be run\n * @param transition The transition to be run when the machine enters in the state that has the nested machine\n * @returns NestedMachineDirective\n * @category Creation\n */\nexport function nested(\n  machine: Machine,\n  transition?: string\n): NestedMachineDirective {\n  return {\n    machine,\n    transition\n  };\n}\n\n/**\n * This is used as documentation for the serialization and in the diagram generation of the machine.\n * Not to be used in the machine execution itself.\n *\n * @param description The description of the state\n * @returns DescriptionDirective\n * @category Creation\n */\nexport function description(description: string): DescriptionDirective {\n  return {\n    description\n  };\n}\n\n/**\n * State directive that represents an info state. This is used as documentation for the serialization and in the diagram generation of the machine.\n * Not to be used in the machine execution itself.\n * @param name The name of the state\n * @param args nested machines, actions, producers, transitions, etc.\n * @returns InfoStateDirective\n * @category Creation\n */\nexport function infoState(\n  name: string,\n  ...args: RunCollection\n): InfoStateDirective {\n  let stateObject = state(name, ...args);\n  stateObject.type = \"info\";\n  return stateObject as InfoStateDirective;\n}\n\n/**\n * State directive that represents a primary state. This is used as documentation for the serialization and in the diagram generation of the machine.\n * Not to be used in the machine execution itself.\n * @param name The name of the state\n * @param args nested machines, actions, producers, transitions, etc.\n * @returns PrimaryStateDirective\n * @category Creation\n */\nexport function primaryState(\n  name: string,\n  ...args: RunCollection\n): PrimaryStateDirective {\n  let stateObject = state(name, ...args);\n  stateObject.type = \"primary\";\n  return stateObject as PrimaryStateDirective;\n}\n\n/**\n * State directive that represents a success state. This is used as documentation for the serialization and in the diagram generation of the machine.\n * Not to be used in the machine execution itself.\n * @param name The name of the state\n * @param args nested machines, actions, producers, transitions, etc.\n * @returns SuccessStateDirective\n * @category Creation\n */\nexport function successState(\n  name: string,\n  ...args: RunCollection\n): SuccessStateDirective {\n  let stateObject = state(name, ...args);\n  stateObject.type = \"success\";\n  return stateObject as SuccessStateDirective;\n}\n\n/**\n * State directive that represents a warning state. This is used as documentation for the serialization and in the diagram generation of the machine.\n * Not to be used in the machine execution itself.\n * @param name The name of the state\n * @param args nested machines, actions, producers, transitions, etc.\n * @returns WarningStateDirective\n * @category Creation\n */\nexport function warningState(\n  name: string,\n  ...args: RunCollection\n): WarningStateDirective {\n  let stateObject = state(name, ...args);\n  stateObject.type = \"warning\";\n  return stateObject as WarningStateDirective;\n}\n\n/**\n * State directive that represents a danger state. This is used as documentation for the serialization and in the diagram generation of the machine.\n * Not to be used in the machine execution itself.\n * @param name The name of the state\n * @param args nested machines, actions, producers, transitions, etc.\n * @returns DangerStateDirective\n * @category Creation\n */\nexport function dangerState(\n  name: string,\n  ...args: RunCollection\n): DangerStateDirective {\n  let stateObject = state(name, ...args);\n  stateObject.type = \"danger\";\n  return stateObject as DangerStateDirective;\n}\n\n// The current state of the machine or null\nexport type CurrentState = string | null;\n\n// Object with all the parallel states of the machine\nexport interface AllStates {\n  [key: string]: CurrentState | AllStates;\n}\n\n/**\n * Get the current state or the parallel states of the machine if no path is provided\n * Or get the current state of a nested machine if a path is provided\n * @param machine The machine to get the current state of\n * @param path The path to the current state, e.g. 'stateA.stateB.stateC'\n * @returns The current state or null if the path is invalid\n * @category State\n */\nexport function getState(\n  machine: Machine,\n  path?: string\n): AllStates | CurrentState {\n  // If there is no machine we will return null\n  if (!isMachine(machine)) {\n    return null;\n  }\n\n  // If there is no path we will return the current state\n  if (!isValidString(path)) {\n    let result = {} as AllStates;\n\n    // We will iterate over all the parallel states\n    if (Object.keys(machine.parallel).length > 0) {\n      for (let parallelName in machine.parallel) {\n        result[parallelName] = getState(machine.parallel[parallelName]);\n      }\n    }\n\n    if (isValidString(machine.current)) {\n      result.current = machine.current;\n    }\n\n    // If there is only one state and it is the current state we will return it\n    if (isValidString(result.current) && Object.keys(result).length === 1) {\n      return result.current;\n    }\n\n    // If we have more than one state or the state is not the current state we will return the object\n    if (Object.keys(result).length > 0) {\n      return result;\n    }\n\n    // If there is no current state and no parallel states we will return null\n    return null;\n  }\n\n  let pathParts = path.split(\".\");\n  let stateName = pathParts.shift();\n\n  // If the state name is not a string we will return null\n  if (!isValidString(stateName)) {\n    return null;\n  }\n\n  // Find the state in the parallel states\n  if (stateName in machine.parallel) {\n    return getState(machine.parallel[stateName], pathParts.join(\".\"));\n  }\n\n  // Find the state in the states\n  if (stateName in machine.states) {\n    // If we have a state we will find the states in the nested machines\n    let obj: AllStates = {};\n\n    // Find a nested machine in the state\n    for (let nested of machine.states[stateName].nested) {\n      obj[nested.machine.id] = getState(nested.machine, pathParts.join(\".\"));\n    }\n\n    // If the object is empty we will return null\n    if (Object.keys(obj).length === 0) {\n      return null;\n    }\n\n    // If the object only has one property we will return the value of the property\n    if (Object.keys(obj).length === 1) {\n      return obj[Object.keys(obj)[0]];\n    }\n\n    // If we are here we will return the whole object\n    return obj;\n  }\n\n  // If we are here check if we have a machine id as the stateName\n  let nestedMachineId = stateName;\n\n  // Find a nested machine in the state\n  for (stateName in machine.states) {\n    for (let nested of machine.states[stateName].nested) {\n      if (nested.machine.id === nestedMachineId) {\n        return getState(nested.machine, pathParts.join(\".\"));\n      }\n    }\n  }\n\n  // If we are here we will return null\n  return null;\n}\n","/** @module x-robot */\nimport {\n  ActionDirective,\n  HistoryType,\n  Machine,\n  ProducerDirective,\n  START_EVENT,\n  StateDirective,\n  TransitionDirective\n} from \"./interfaces\";\nimport {\n  canMakeTransition,\n  cloneContext,\n  deepFreeze,\n  hasTransition,\n  isAction,\n  isGuard,\n  isNestedGuard,\n  isNestedMachineWithTransitionDirective,\n  isNestedTransition,\n  isParallelTransition,\n  isProducer,\n  isProducerWithTransition,\n  isValidObject,\n  isValidString\n} from \"../utils\";\n\n/**\n * @param machine The machine that is running\n * @param producer The producer to invoke\n * @param payload The payload to pass to the producer\n * @returns Promise or void depending if the machine is async or not\n */\nfunction runProducer(\n  machine: Machine,\n  producer?: ProducerDirective | string | null,\n  payload?: any\n): Promise<void> | void {\n  // If it is a producer then we run it\n  if (isProducer(producer)) {\n    // Add the producer to the history\n    machine.history.push(`${HistoryType.Producer}: ${producer.producer.name}`);\n\n    // Get the context\n    let context = machine.context;\n\n    // If the machine is frozen we need to clone the context\n    if (machine.frozen) {\n      context = cloneContext(context);\n    }\n\n    // Run the producer\n    let newContext = producer.producer(context, payload);\n\n    // Check if the producer returned a context and if so we update the context\n    if (isValidObject(newContext)) {\n      context = newContext;\n    }\n\n    // Set the new context\n    machine.context = context;\n\n    // If the machine is frozen, we will deep freeze the context again\n    if (machine.frozen) {\n      deepFreeze(machine.context);\n    }\n\n    // If the producer has a transition then we run it\n    if (isProducerWithTransition(producer)) {\n      return invoke(machine, producer.transition);\n    }\n\n    // If is a string, we assume it is a transition instead of a producer and we run it\n  } else if (isValidString(producer)) {\n    return invoke(machine, producer);\n  }\n}\n\n/**\n * Actions are always async and the existence of an action in a machine means that the machine is async too\n * @param machine The machine that is running\n * @param action The action to invoke\n * @param payload The payload to pass to the action\n * @returns Promise\n */\nasync function runAction(\n  machine: Machine,\n  action: ActionDirective,\n  payload?: any\n): Promise<void> {\n  // Add the action to the history\n  machine.history.push(`${HistoryType.Action}: ${action.action.name}`);\n\n  // Run the action\n  try {\n    let result = await action.action(machine.context, payload);\n    await runProducer(machine, action.success, result);\n  } catch (error) {\n    if (isProducer(action.failure) || isValidString(action.failure)) {\n      await runProducer(machine, action.failure, error);\n    } else {\n      throw error;\n    }\n  }\n}\n\nfunction hasFatalError(machine: Machine): boolean {\n  return machine.fatal instanceof Error;\n}\n\n/**\n *\n * The error handler is called when an error is thrown in a transition\n * First we check if the current state has an error transition and if so we run it\n * If the current state does not have an error transition, we check if the machine has a fatal state and if so we go to it\n * If the machine does not have a fatal state, we rethrow the error\n *\n * @param machine The machine that is running\n * @param state The current state of the machine\n * @param error The error that was thrown\n * @returns Promise or void depending if the machine is async or not and if there is a error transition to invoke\n */\nfunction catchError(\n  machine: Machine,\n  state: StateDirective,\n  error: Error\n): Promise<void> | void {\n  // Check if we have a local error transition and invoke it if so\n  if (hasTransition(state, \"error\")) {\n    return invoke(machine, \"error\", error);\n  }\n\n  // Check if we have a fatal state and set it as the current state if so\n  if (\"fatal\" in machine.states) {\n    machine.current = \"fatal\";\n    machine.fatal = error as Error;\n    return;\n  }\n\n  // If we don't have a fatal state, we throw the error\n  // But we also assign the error to the machine so that it can be accessed\n  // from the outside\n  machine.fatal = error as Error;\n  throw error;\n}\n\n/**\n *\n * @param machine The machine that is running\n * @param state The current state of the machine\n * @param payload The payload to pass to the actions and producers\n * @returns Promise as we know that the machine is async\n */\nasync function runActionsAndProducers(\n  machine: Machine,\n  state: StateDirective,\n  payload: any\n): Promise<void> {\n  for (let i = 0; i < state.run.length; i++) {\n    let item = state.run[i];\n    try {\n      if (isAction(item)) {\n        await runAction(machine, item, payload);\n      } else if (isProducer(item)) {\n        await runProducer(machine, item, payload);\n      }\n    } catch (error) {\n      await catchError(machine, state, error as Error);\n      return;\n    }\n  }\n}\n\n/**\n * @param machine The machine that is running\n * @param state The current state of the machine\n * @param payload The payload to pass to the producers\n * @returns void as we know that the machine is not async\n */\nfunction runProducers(machine: Machine, state: StateDirective, payload: any) {\n  for (let i = 0; i < state.run.length; i++) {\n    let item = state.run[i];\n    try {\n      if (isProducer(item)) {\n        runProducer(machine, item, payload);\n      }\n    } catch (error) {\n      catchError(machine, state, error as Error);\n      break;\n    }\n  }\n}\n\n/**\n *\n * @param machine The machine that is running\n * @param state The current state of the machine\n * @param transition The transition that is being invoked\n * @param payload The payload to pass to the guards\n * @param index The current index of the guard in the transition\n * @returns boolean\n */\nfunction runGuards(\n  machine: Machine,\n  state: StateDirective,\n  transition: TransitionDirective,\n  payload: any\n): boolean {\n  for (let i = 0; i < transition.guards.length; i++) {\n    // Run the guard\n    let guard = transition.guards[i];\n\n    try {\n      // If the item is not a guard then return false\n      // ? Should we throw an error instead?\n      if (!isGuard(guard)) {\n        return false;\n      }\n\n      // Add the guard to the history\n      machine.history.push(`${HistoryType.Guard}: ${guard.guard.name}`);\n\n      // Result could be a boolean or anything else\n      let result;\n\n      // If the guard is a nested guard run it with the nested machine context\n      if (isNestedGuard(guard)) {\n        result = guard.guard(guard.machine.context, payload);\n      } else {\n        result = guard.guard(machine.context, payload);\n      }\n\n      // If the result is different than true we break the loop and return false\n      if (result !== true) {\n        // If the result is other than true, we can return false and check if we have a failure producer and invoke it if so\n        // passing the result as the payload (This is useful for error handling)\n        if (isProducer(guard.failure)) {\n          runProducer(machine, guard.failure, result);\n        }\n\n        return false;\n      }\n    } catch (error) {\n      // Catch the error and invoke the error transition if we have one\n      catchError(machine, state, error as Error);\n\n      return false;\n    }\n  }\n\n  // If we get here, we have a success and we can return true\n  return true;\n}\n\n/**\n *\n * @param machine The machine that is running\n * @param state The current state of the machine\n * @param payload The payload to pass to the actions and producers of the nested machine\n * @returns Promise or void depending if the machine is async or not\n */\nfunction runNestedMachines(\n  machine: Machine,\n  state: StateDirective,\n  payload: any\n): Promise<void> | void {\n  // If there are no nested machines, we can return\n  if (state.nested.length === 0) {\n    return;\n  }\n\n  let promise;\n  if (machine.isAsync) {\n    promise = Promise.resolve();\n  }\n\n  // If the state has a nested machine, we run it\n  for (let nestedMachine of state.nested) {\n    // If the nested machine is a nested machine with a transition we run the transition on it\n    if (isNestedMachineWithTransitionDirective(nestedMachine)) {\n      let transition = nestedMachine.transition;\n      if (promise) {\n        promise = promise.then(() =>\n          invoke(nestedMachine.machine, transition, payload)\n        );\n      } else {\n        invoke(nestedMachine.machine, transition, payload);\n      }\n    }\n  }\n\n  // Return the promise\n  return promise || void 0;\n}\n\n/**\n *\n * @param machine The machine that is running\n * @param transition The transition that is being invoked\n * @param payload The payload to pass to the actions and producers of the nested machine\n * @returns Promise or void depending if the machine is async or not\n */\nfunction runNestedTransition(\n  machine: Machine,\n  transition: string,\n  payload: any\n): Promise<void> | void {\n  // We know that we have a nested transition and that the first part is the current state\n  // so we get rid of the first part and split the rest\n  let nestedTransitionParts = transition.split(\".\");\n  let stateName = nestedTransitionParts.shift();\n  let nestedTransition = nestedTransitionParts.join(\".\");\n  let promise = machine.isAsync ? Promise.resolve() : null;\n\n  // If we have no stateName, we can't make a transition\n  if (!stateName) {\n    return;\n  }\n\n  let currentStateObject = machine.states[machine.current];\n\n  // We loop through the nested machines and invoke the transition if we can\n  for (let nestedMachineDirective of currentStateObject.nested) {\n    let nestedMachine = nestedMachineDirective.machine;\n    let currentNestedState = nestedMachine.states[nestedMachine.current];\n    if (\n      canMakeTransition(nestedMachine, currentNestedState, nestedTransition)\n    ) {\n      if (promise) {\n        promise = promise.then(() =>\n          invoke(nestedMachine, nestedTransition, payload)\n        );\n      } else {\n        invoke(nestedMachine, nestedTransition, payload);\n      }\n    }\n  }\n\n  // If we have an immediate transitions we can run it\n  if (promise) {\n    promise = promise.then(() =>\n      invokeImmediateDirectives(machine, currentStateObject, payload)\n    );\n  } else {\n    invokeImmediateDirectives(machine, currentStateObject, payload);\n  }\n\n  return promise || void 0;\n}\n\n/**\n *\n * @param machine The machine that is running\n * @param transition The transition that is being invoked\n * @param payload The payload to pass to the actions and producers of the parallel machine\n * @returns Promise or void depending if the machine is async or not\n */\nfunction runParallelTransition(\n  machine: Machine,\n  transition: string,\n  payload: any\n): Promise<void> | void {\n  // We know that we have a parallel transition and that the first part is the parallelMachineId\n  // so we get rid of the first part and split the rest\n  let parallelTransitionParts = transition.split(\"/\");\n  let parallelMachineId = parallelTransitionParts.shift();\n  let parallelTransition = parallelTransitionParts.join(\"/\");\n\n  // If we have no stateName, we can't make a transition\n  if (!parallelMachineId) {\n    throw new Error(`Invalid transition ${transition}`);\n  }\n\n  // If there is no parallel machine with the given id, we can't make a transition\n  let parallelMachine = machine.parallel[parallelMachineId];\n  if (!parallelMachine) {\n    throw new Error(`Invalid transition ${transition}`);\n  }\n\n  // If the parallelMachineId is in the parallel object try to run the transition in the parallel machine\n  return invoke(parallelMachine, parallelTransition, payload);\n}\n/**\n *\n * @param machine The machine that is running\n * @param state The current state of the machine\n * @param payload The payload to pass to the actions and producers of the transition\n * @returns Promise or void depending if the machine is async or not\n */\nfunction invokeImmediateDirectives(\n  machine: Machine,\n  state: StateDirective,\n  payload: any\n): Promise<void> | void {\n  // If there are no immediate directives, we can return\n  if (state.immediate.length === 0) {\n    return;\n  }\n\n  let immediate = state.immediate;\n  let promise = machine.isAsync ? Promise.resolve() : null;\n\n  // For each immediate directive\n  for (let immediateDirective of immediate) {\n    if (hasFatalError(machine)) {\n      return;\n    }\n\n    // If is a parallel transition we run the transition in the parallel machine\n    if (isParallelTransition(immediateDirective.immediate)) {\n      let transitionParts = immediateDirective.immediate.split(\"/\");\n      let parallelMachineId = transitionParts.shift() as string;\n      let parallelTransition = transitionParts.join(\"/\");\n      let parallelMachine = machine.parallel[parallelMachineId];\n      if (promise) {\n        promise = promise.then(() =>\n          invoke(parallelMachine, parallelTransition, payload)\n        );\n      } else {\n        invoke(parallelMachine, parallelTransition, payload);\n      }\n    }\n\n    // If is a nested transition we run the transition in the nested machine\n    else if (isNestedTransition(immediateDirective.immediate)) {\n      if (promise) {\n        promise = promise.then(() =>\n          invoke(machine, immediateDirective.immediate, payload)\n        );\n      } else {\n        invoke(machine, immediateDirective.immediate, payload);\n      }\n    }\n\n    // If is a transition we run the transition\n    else {\n      if (promise) {\n        promise = promise.then(async () => {\n          // Only run the next immediate if the current state is equal to the state we are in now\n          if (machine.current === state.name) {\n            await invoke(machine, immediateDirective.immediate, payload);\n          }\n        });\n      } else {\n        // Only run the next immediate if the current state is equal to the state we are in now\n        if (machine.current === state.name) {\n          invoke(machine, immediateDirective.immediate, payload);\n        }\n      }\n    }\n  }\n\n  return promise || void 0;\n}\n\n/**\n *\n * @param machine The machine to invoke the transition on\n * @param transition The transition to invoke\n * @param payload The optional payload to pass to the transition\n * @returns Void or a promise if the machine is async\n * @category Invocation\n */\nexport function invoke(\n  machine: Machine,\n  transition: string,\n  payload?: any\n): Promise<void> | void {\n  // If the machine has a fatal error, we will return immediately\n  if (hasFatalError(machine)) {\n    return;\n  }\n\n  // Check if we have received a valid transition as string and throw an error if not\n  if (isValidString(transition) === false) {\n    throw new Error(\n      `Trying to invoke a transition with an invalid string: ${transition}`\n    );\n  }\n\n  let trimmedTransition = transition.trim();\n\n  // If the transition equals START_EVENT, we get the initial state\n  if (trimmedTransition === START_EVENT) {\n    transition = machine.initial;\n  }\n\n  // Get the current state object\n  let currentStateObject = machine.states[machine.current];\n\n  let hasTransition = canMakeTransition(\n    machine,\n    currentStateObject,\n    trimmedTransition\n  );\n\n  // Check if the transition exists in the current state and throw an error if not\n  if (!hasTransition) {\n    throw new Error(\n      `The transition '${trimmedTransition}' does not exist in the current state '${machine.current}'`\n    );\n  }\n\n  // Check if we have a nested or parallel transition\n  if (isParallelTransition(trimmedTransition)) {\n    return runParallelTransition(machine, trimmedTransition, payload);\n  }\n\n  if (isNestedTransition(trimmedTransition)) {\n    return runNestedTransition(machine, trimmedTransition, payload);\n  }\n\n  // Only run guards if the transition is not the START_EVENT\n  if (trimmedTransition !== START_EVENT) {\n    // Add the transition to the history\n    machine.history.push(`${HistoryType.Transition}: ${trimmedTransition}`);\n\n    // Get the transition object\n    let transitionObject = currentStateObject.on[trimmedTransition];\n\n    // If the transition has guards, run them and decide if we should continue\n    let shouldContinue = runGuards(\n      machine,\n      currentStateObject,\n      transitionObject,\n      payload\n    );\n    if (shouldContinue === false) {\n      // As we tried to make a transition, we need to add the current state to the history\n      machine.history.push(`${HistoryType.State}: ${currentStateObject.name}`);\n      return;\n    }\n  }\n\n  // Get the target state\n  let targetState =\n    trimmedTransition === START_EVENT\n      ? machine.initial\n      : currentStateObject.on[trimmedTransition].target;\n\n  // Check if we have a valid target state as string and throw an error if not\n  if (isValidString(targetState) === false) {\n    throw new Error(\n      `Trying to invoke a transition with an invalid target state: ${targetState}`\n    );\n  }\n\n  // Check if the target state exists in the machine and throw an error if not\n  if (targetState in machine.states === false) {\n    throw new Error(\n      `Invalid target state '${targetState}' for '${machine.current}.${trimmedTransition}' transition`\n    );\n  }\n\n  // Get the target state\n  let targetStateObject = machine.states[targetState];\n\n  // Only change the current state if the transition is not START_EVENT\n  if (trimmedTransition !== START_EVENT) {\n    // Set the current state\n    machine.current = targetState;\n    machine.history.push(`${HistoryType.State}: ${targetState}`);\n  }\n\n  if (machine.isAsync) {\n    let promise = Promise.resolve();\n\n    // Try to run nested machines if any\n    promise = promise.then(() =>\n      runNestedMachines(machine, targetStateObject, payload)\n    );\n\n    // Run the actions and producers\n    promise = promise.then(() =>\n      runActionsAndProducers(machine, targetStateObject, payload)\n    );\n\n    // If there are immediate directives, run them\n    promise = promise.then(() =>\n      invokeImmediateDirectives(machine, targetStateObject, payload)\n    );\n\n    // Return the promise\n    return promise;\n  }\n\n  // Try to run nested machines if any\n  runNestedMachines(machine, targetStateObject, payload);\n\n  // Run the actions or producers of the target state\n  runProducers(machine, targetStateObject, payload);\n\n  // If there are immediate directives, run them\n  invokeImmediateDirectives(machine, targetStateObject, payload);\n}\n\n/**\n *\n * @param machine The machine to run the initial state arguments\n * @param payload The optional payload to pass to the initial state\n * @returns Void or a promise if the machine is async\n * @category Invocation\n */\nexport function start(machine: Machine, payload?: any): Promise<void> | void {\n  // Validate initial transition before invoking\n  let canStartMachine = canMakeTransition(\n    machine,\n    machine.states[machine.current],\n    START_EVENT\n  );\n  // If we can't start the machine, throw an error\n  if (!canStartMachine) {\n    throw new Error(`The machine has already been started.`);\n  }\n\n  return invoke(machine, START_EVENT, payload);\n}\n"],"mappings":"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"}